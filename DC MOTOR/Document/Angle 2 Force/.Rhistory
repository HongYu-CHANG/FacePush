a <- array(1:30, c(3, 2, 5))
a
a <- array(1:30, c(3, 5, 2))
a
label.p.y.given.x(a)
clusters
alpha
a
a[:, :, 0]
a[, , 1]
tc
?stopifnot
getAnywhere(t.test)
getAnywhere(mean)
leibnitz_pi <- function(n = 10) {
stopifnot(is.numeric(n))
stopifnot(n > 0)
est <- 1
for (i in seq(length = n)) {
est <- est + (-1) ^ i / (2 * i + 1)
}
pi_est <- 4 * est
rslt <- list(pi_est = pi_est, n = n)
class(rslt) <- c("leibnitz_pi", "est_pi", class(rslt))
return(rslt)
}
leibnitz_pi(99)
# Implement generic print method for leibnitz_pi
print.leibnitz_pi <- function(x, ...) {
cat(x$pi_est, "(from the Leibnitz formula\n)")
}
print(leibnitz_pi(99))
# Implement generic print method for leibnitz_pi
print.leibnitz_pi <- function(x, ...) {
cat(x$pi_est, "(from the Leibnitz formula)\n")
}
print(leibnitz_pi(99))
methods("print")
methods("print")[grep("leibnitz", methods("print"))]
estpi.leibnitz_pi <- function(x, ...) {
x$estpi
}
estpi(leibnitz_pi(99))
estpi <- function(x, ...) {
UseMethod("estpi", x)
}
estpi.leibnitz_pi <- function(x, ...) {
x$estpi
}
estpi(leibnitz_pi(99))
estpi.leibnitz_pi <- function(x, ...) {
x$est_pi
}
estpi(leibnitz_pi(99))
estpi.leibnitz_pi <- function(x, ...) {
x$pi_est
}
estpi(leibnitz_pi(99))
90 * 0.8
leibnitz_pi(99)
print(leibnitz_pi(99))
attr(leibnitz_pi(99))
# Leibnitz formula for pi
leibnitz_pi <- function(n = 10) {
stopifnot(is.numeric(n))
stopifnot(n > 0)
est <- 1
for (i in seq(length = n)) {
est <- est + (-1) ^ i / (2 * i + 1)
}
pi_est <- 4 * est
rslt <- list(pi_est = pi_est, n = n)
class(rslt) <- c("leibnitz_pi", "est_pi", class(rslt))
return(rslt)
}
print(leibnitz_pi(99))
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
corex
rcorex <- function(n_hidden = 2, dim_hidden = 2, batch_size = 1e6, max_iter = 400,
n_repeat = 1, eps = 1e-6, alpha_hyper = c(0.3, 1.0, 500.0),
balance = 0.0, missing_values = -1, seed = NULL, verbose = False) {
dim_hidden <- dim_hidden  # Each hidden factor can take dim_hidden discrete values
n_hidden <- n_hidden  # Number of hidden factors to use (Y_1,...Y_m) in paper
missing_values <- missing_values  # Implies the value for this variable for this sample is unknown
max_iter <- max_iter  # Maximum number of updates to run, regardless of convergence
batch_size <- batch_size  # TODO: re-implement running with mini-batches
n_repeat <- n_repeat  # TODO: Run multiple times and take solution with largest TC
eps <- eps  # Change in TC to signal convergence
lam <- alpha_hyper[1]  # Hyper-parameters for updating alpha
tmin <- alpha_hyper[2]  # Hyper-parameters for updating alpha
ttc <- alpha_hyper[3]  # Hyper-parameters for updating alpha
balance <- balance # 0 implies no balance constraint. Values between 0 and 1 are valid.
set.seed(seed)  # Set for deterministic results
# change these following into R statements
verbose <- verbose
rslt <- list(dim_hidden = dim_hidden, n_hidden = n_hidden, missing_values = missing_values,
max_iter = max_iter, batch_size = batch_size, n_repeat = n_repeat,
eps = eps, lam = lam, tmin = tmin, ttc = ttc, balance = balance, verbose = verbose)
class(rslt) <- c("rcorex", class(rslt))
return(rslt)
#if (verbose > 0) {
# print options only
# np.set_printoptions(precision=3, suppress=True, linewidth=200) #
# print('corex, rep size: {}, {}'.format(n_hidden, dim_hidden)) #
#}
#if (verbose > 1) {
#  np.seterr(all='warn')
#}
#else {
#  np.seterr(all='ignore')
#}
}
rcorex()
rcorex <- function(n_hidden = 2, dim_hidden = 2, batch_size = 1e6, max_iter = 400,
n_repeat = 1, eps = 1e-6, alpha_hyper = c(0.3, 1.0, 500.0),
balance = 0.0, missing_values = -1, seed = NULL, verbose = FALSE) {
dim_hidden <- dim_hidden  # Each hidden factor can take dim_hidden discrete values
n_hidden <- n_hidden  # Number of hidden factors to use (Y_1,...Y_m) in paper
missing_values <- missing_values  # Implies the value for this variable for this sample is unknown
max_iter <- max_iter  # Maximum number of updates to run, regardless of convergence
batch_size <- batch_size  # TODO: re-implement running with mini-batches
n_repeat <- n_repeat  # TODO: Run multiple times and take solution with largest TC
eps <- eps  # Change in TC to signal convergence
lam <- alpha_hyper[1]  # Hyper-parameters for updating alpha
tmin <- alpha_hyper[2]  # Hyper-parameters for updating alpha
ttc <- alpha_hyper[3]  # Hyper-parameters for updating alpha
balance <- balance # 0 implies no balance constraint. Values between 0 and 1 are valid.
set.seed(seed)  # Set for deterministic results
# change these following into R statements
verbose <- verbose
rslt <- list(dim_hidden = dim_hidden, n_hidden = n_hidden, missing_values = missing_values,
max_iter = max_iter, batch_size = batch_size, n_repeat = n_repeat,
eps = eps, lam = lam, tmin = tmin, ttc = ttc, balance = balance, verbose = verbose)
class(rslt) <- c("rcorex", class(rslt))
return(rslt)
#if (verbose > 0) {
# print options only
# np.set_printoptions(precision=3, suppress=True, linewidth=200) #
# print('corex, rep size: {}, {}'.format(n_hidden, dim_hidden)) #
#}
#if (verbose > 1) {
#  np.seterr(all='warn')
#}
#else {
#  np.seterr(all='ignore')
#}
}
rcorex()
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
label_p_y_given_x <- function(p_y_given_x, ...) {
UseMethod("label_p_y_given_x", p_y_given_x)
}
label_p_y_given_x <- function(rcorex, ...) {
UseMethod("label_p_y_given_x", rcorex)
}
label_p_y_given_x.corex <- function(rcorex, ...) {
# Maximum likelihood labels for some distribution over y's
t(argmax(rcorex$p_y_given_x, axis = 3))
}
corex
rcorex()
label_p_y_given_x.rcorex <- function(rcorex, ...) {
# Maximum likelihood labels for some distribution over y's
t(argmax(rcorex$p_y_given_x, axis = 3))
}
label_p_y_given_x(rcorex())
rcorex
rcorex()
rcorex()$p_y_given_x
#
# @property in R?
ml_labels <- function(rcorex, ...) {
UseMethod("ml_lables", rcorex)
}
ml_labels.rcorex <- function(rcorex, ...) {
# maximum likelihood labels for trainging data
label_p_y_given_x()
}
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
seq(5)
seq(5-1)
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
source('~/Documents/_18S_CF_Project/CorEx/rcorex.R')
install.packages("fread")
install.packages("data.table")
install.packages("tidyverse")
install.packages("shiny", "rmarkdown")
install.packages("shiny")
install.packages("rmarkdown")
install.packages("xgboost")
install.packages("ggmap")
install.packages("rgl")
install.packages("grep")
getAnywhere("grep")
install.packages("stringr")
install.packages("e1071")
install.packages("nnet")
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Document/Angle 2 Force/")
dir()
dta_lst <- lapply(dir(), function(x) read.table(x, sep = ',', header = TRUE))
for ( i in 1:18 ){
dim(dta_lst[[i]])[1]
plot(1:dim(dta_lst[[i]])[1], dta_lst[[i]][, 3], type = "l", xlab = i)
abline(h = mean(dta_lst[[i]][, 3]), col = 2)
}
# extracht data while pushing, for finding pressure
dta_push <- lapply(dta_lst, function(x) {
subset(x, x[, 3] >= mean(x[, 3]))
})
len_dta_push <- unlist(lapply(dta_push, function(x) dim(x)[1]))
library(data.table)
dta_push <- rbindlist(dta_push)
dta_push$Angle <- rep(seq(from = 10, to = 180, by = 10), len_dta_push)
dta_push
plot(1:1730, dta_push$LowerRight, type = 'l')
dim(dta_push)
library(reshape2)
dta_push_long <- reshape(dta_push,
varying = c("UpperRight", "LowerRight", "UpperMiddle",
"LowerLeft", "UpperLeft"),
v.names = "Pressure", direction = "long")
dta_push_long$time <- as.factor(dta_push_long$time)
levels(dta_push_long$time) <- c("UpperRight", "LowerRight", "UpperMiddle",
"LowerLeft", "UpperLeft")
names(dta_push_long) <- c("Angle", "Location", "Pressure", "id")
# pressure of each fsr
library(ggplot2)
library(dplyr)
agg_data <- subset(dta_push_long, dta_push_long$Location != "UpperMiddle")
agg_data <- subset(agg_data, agg_data$Angle != 180)
agg_data <- agg_data %>%  group_by(Angle) %>%
summarise(m = mean(Pressure))
final_m <- lm(m ~ Angle, agg_data) # the closest to our previous result
summary(final_m)
# angle to pressure plot
jpeg("a2p.jpeg", width = 7.5, height = 3.5, units = 'in', res = 300)
ggplot(agg_data, aes(x = Angle, y = m)) +
geom_point(shape = 17, color = "forestgreen", size = 2) +
#geom_abline(slope = coef(final_m)[2], intercept = coef(final_m)[1]) +
stat_smooth(method = "lm", se = F, col = "black", lwd = 0.5) +
labs(x = "Angle 10 - 170 degrees", y = "Pressure in kPa") +
scale_x_continuous(limits = c(0, 180), breaks = seq(0, 170, 10), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 4.5), breaks = seq(0, 4.5, 0.5), expand = c(0, 0)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
dev.off()
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Document/Other/")
dir()
dta <- read.table("./comfortness-pilot.csv", sep = ',', header = TRUE)
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
library(dplyr)
dta$pressure <- as.factor(dta$pressure)
table(dta$pressure)
dta_barplot <- dta %>% group_by(pressure) %>%
summarise(m_comfort = mean(comfortness),
std_comfort = sd(comfortness),
m_face = mean(from_face),
std_face = sd(from_face))
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Document/Other/")
dir()
dta <- read.table("./comfortness-pilot.csv", sep = ',', header = TRUE)
dta$pressure <- as.factor(dta$pressure)
table(dta$pressure)
dta_barplot <- dta %>% group_by(pressure) %>%
summarise(m_comfort = mean(comfortness),
std_comfort = sd(comfortness),
m_face = mean(from_face),
std_face = sd(from_face))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
scale_x_discrete(labels = c(2.575, 2.7, 3.075, 3.2, 3.575, 3.7)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Ratio of the force was came from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "% of force coming from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
comfort <- ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
scale_x_discrete(labels = c(2.575, 2.7, 3.075, 3.2, 3.575, 3.7)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
face <- ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "% of force coming from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
library(gridExtra)
jpeg("a2p.jpeg", width = 24.05, height = 11, units = 'mm', res = 300)
grid.arrange(comfort, face, nrow = 1)
dev.off()
grid.arrange(comfort, face, nrow = 1)
jpeg("a2p.jpeg", width = 24.05, height = 11, units = 'cm', res = 300)
grid.arrange(comfort, face, nrow = 1)
dev.off()
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Document/Angle 2 Force/")
dir()
dta_lst <- lapply(dir(), function(x) read.table(x, sep = ',', header = TRUE))
# check FacePush was pulling at which trial points
for ( i in 1:18 ){
dim(dta_lst[[i]])[1]
plot(1:dim(dta_lst[[i]])[1], dta_lst[[i]][, 3], type = "l", xlab = i)
abline(h = mean(dta_lst[[i]][, 3]), col = 2)
}
# extracht data while pushing, for finding pressure
dta_push <- lapply(dta_lst, function(x) {
subset(x, x[, 3] >= mean(x[, 3]))
})
len_dta_push <- unlist(lapply(dta_push, function(x) dim(x)[1]))
library(data.table)
dta_push <- rbindlist(dta_push)
dta_push$Angle <- rep(seq(from = 10, to = 180, by = 10), len_dta_push)
dta_push
plot(1:1730, dta_push$LowerRight, type = 'l')
dim(dta_push)
library(reshape2)
dta_push_long <- reshape(dta_push,
varying = c("UpperRight", "LowerRight", "UpperMiddle",
"LowerLeft", "UpperLeft"),
v.names = "Pressure", direction = "long")
dta_push_long$time <- as.factor(dta_push_long$time)
levels(dta_push_long$time) <- c("UpperRight", "LowerRight", "UpperMiddle",
"LowerLeft", "UpperLeft")
names(dta_push_long) <- c("Angle", "Location", "Pressure", "id")
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_barplot(stat = "identity") +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_bar(stat = "identity") +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
dta_push_long %>% group_by(Location) %>%
summarise(m_pressure = mean(Pressure),
std_pressure = sd(Pressure))
dta_barplot <- dta_push_long %>% group_by(Location) %>%
summarise(m_pressure = mean(Pressure),
std_pressure = sd(Pressure))
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(data = dta_barplot, aes(ymin = m_pressure - std_pressure,
ymax = m_pressure + std_pressure),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(data = dta_barplot, aes(ymin = m_pressure - std_pressure,
ymax = m_pressure + std_pressure),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
dta_barplot <- dta_push_long %>% group_by(Location) %>%
summarise(m_pressure = mean(Pressure),
std_pressure = sd(Pressure))
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(data = dta_barplot, aes(ymin = m_pressure - std_pressure,
ymax = m_pressure + std_pressure),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
dta_push_long
dta_barplot
ggplot(dta_barplot, aes(x = reorder(Location, m_pressure, max),
y = m_ressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(data = dta_barplot, aes(ymin = m_pressure - std_pressure,
ymax = m_pressure + std_pressure),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
ggplot(dta_barplot, aes(x = reorder(Location, m_pressure, max),
y = m_pressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(data = dta_barplot, aes(ymin = m_pressure - std_pressure,
ymax = m_pressure + std_pressure),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
ggplot(dta_barplot, aes(x = reorder(Location, m_pressure, max),
y = m_pressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(data = dta_barplot, aes(ymin = m_pressure - std_pressure,
ymax = m_pressure + std_pressure),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
jpeg("5-location-pressure.jpeg", width = 24.05, height = 11, units = 'cm', res = 300)
ggplot(dta_barplot, aes(x = reorder(Location, m_pressure, max),
y = m_pressure, fill = Location)) +
geom_bar(stat = "identity") +
geom_errorbar(data = dta_barplot, aes(ymin = m_pressure - std_pressure,
ymax = m_pressure + std_pressure),
width = .2) +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
dev.off()
library(dplyr)
agg_data <- subset(dta_push_long, dta_push_long$Location != "UpperMiddle")
agg_data <- subset(agg_data, agg_data$Angle != 180)
final_m <- lm(m ~ Angle, agg_data) # the closest to our previous result
summary(final_m)
agg_data <- agg_data %>%  group_by(Angle) %>%
summarise(m = mean(Pressure))
final_m <- lm(m ~ Angle, agg_data) # the closest to our previous result
summary(final_m)
ggplot(agg_data, aes(x = Angle, y = m)) +
geom_point(shape = 17, color = "forestgreen", size = 2) +
#geom_abline(slope = coef(final_m)[2], intercept = coef(final_m)[1]) +
stat_smooth(method = "lm", se = F, col = "black", lwd = 0.5) +
labs(x = "Angle 10 - 170 degrees", y = "Pressure in kPa") +
scale_x_continuous(limits = c(0, 180), breaks = seq(0, 170, 10), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 4.5), breaks = seq(0, 4.5, 0.5), expand = c(0, 0)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
jpeg("a2p.jpeg", width = 24.05, height = 11, units = 'cm', res = 300)
ggplot(agg_data, aes(x = Angle, y = m)) +
geom_point(shape = 17, color = "forestgreen", size = 2) +
#geom_abline(slope = coef(final_m)[2], intercept = coef(final_m)[1]) +
stat_smooth(method = "lm", se = F, col = "black", lwd = 0.5) +
labs(x = "Angle 10 - 170 degrees", y = "Pressure in kPa") +
scale_x_continuous(limits = c(0, 180), breaks = seq(0, 170, 10), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 4.5), breaks = seq(0, 4.5, 0.5), expand = c(0, 0)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
dev.off()
