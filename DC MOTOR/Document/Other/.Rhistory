out <- data.frame(rate_diff = as.vector(result_mat),
delta_load_base = as.vector(ob_b))
out
# remove 3.45 column for our system limitation
out <- out[1:12, ]
m0 <- lm(rate_diff ~ log(delta_load_base), data = out)
m0
summary(m0)
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Document/Angle 2 Force/")
dir()
dta_lst <- lapply(dir(), function(x) read.table(x, sep = ',', header = TRUE))
dta_push <- lapply(dta_lst, function(x) {
subset(x, x[, 3] >= mean(x[, 3]))
})
len_dta_push <- unlist(lapply(dta_push, function(x) dim(x)[1]))
library(data.table)
dta_push <- rbindlist(dta_push)
dta_push$Angle <- rep(seq(from = 10, to = 180, by = 10), len_dta_push)
dta_push
plot(1:1730, dta_push$LowerRight, type = 'l')
dim(dta_push)
library(reshape2)
dta_push_long <- reshape(dta_push,
varying = c("UpperRight", "LowerRight", "UpperMiddle",
"LowerLeft", "UpperLeft"),
v.names = "Pressure", direction = "long")
dta_push_long$time <- as.factor(dta_push_long$time)
levels(dta_push_long$time) <- c("UpperRight", "LowerRight", "UpperMiddle",
"LowerLeft", "UpperLeft")
names(dta_push_long) <- c("Angle", "Location", "Pressure", "id")
# pressure of each fsr
library(ggplot2)
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_boxplot() +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
jpeg("out.jpeg", width = 5, height = 2.5, units = 'in', res = 300)
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_boxplot() +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
dev.off()
jpeg("out.jpeg", width = 7.5, height = 3.5, units = 'in', res = 300)
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_boxplot() +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
dev.off()
# remove upper middle data
lm(Pressure ~ Angle, data = subset(dta_push_long, dta_push_long$Location != "UpperMiddle"))
library(dplyr)
agg_data <- subset(dta_push_long, dta_push_long$Location != "UpperMiddle")
agg_data <- subset(agg_data, agg_data$Angle != 180)
agg_data <- agg_data %>%  group_by(Angle) %>%
summarise(m = mean(Pressure))
final_m <- lm(m ~ Angle, agg_data) # the closest to our previous result
summary(final_m)
jpeg("a2p.jpeg", width = 7.5, height = 3.5, units = 'in', res = 300)
ggplot(agg_data, aes(x = Angle, y = m)) +
geom_point(shape = 17, color = "forestgreen", size = 2) +
#geom_abline(slope = coef(final_m)[2], intercept = coef(final_m)[1]) +
stat_smooth(method = "lm", se = F, col = "black", lwd = 0.5) +
labs(x = "Angle 10 - 180 degrees", y = "Pressure in kPa") +
scale_x_continuous(limits = c(0, 180), breaks = seq(0, 170, 10), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 4.5), breaks = seq(0, 4.5, 0.5), expand = c(0, 0)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
dev.off()
jpeg("out.jpeg", width = 7.5, height = 3.5, units = 'in', res = 300)
ggplot(dta_push_long, aes(x = reorder(Location, Pressure, mean),
y = Pressure, fill = Location)) +
geom_boxplot() +
labs(x = "Location on Face", y = "Pressure in kPa") +
coord_flip() + theme_bw() +
scale_fill_manual(values = c( "gray25", "gray40", "gray55", "gray70", "gray85")) +
theme(legend.position = c(0.85, 0.3))
dev.off()
agg_data <- subset(dta_push_long, dta_push_long$Location != "UpperMiddle")
agg_data <- subset(agg_data, agg_data$Angle != 180)
agg_data <- agg_data %>%  group_by(Angle) %>%
summarise(m = mean(Pressure))
final_m <- lm(m ~ Angle, agg_data) # the closest to our previous result
summary(final_m)
jpeg("a2p.jpeg", width = 7.5, height = 3.5, units = 'in', res = 300)
ggplot(agg_data, aes(x = Angle, y = m)) +
geom_point(shape = 17, color = "forestgreen", size = 2) +
#geom_abline(slope = coef(final_m)[2], intercept = coef(final_m)[1]) +
stat_smooth(method = "lm", se = F, col = "black", lwd = 0.5) +
labs(x = "Angle 10 - 180 degrees", y = "Pressure in kPa") +
scale_x_continuous(limits = c(0, 180), breaks = seq(0, 170, 10), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 4.5), breaks = seq(0, 4.5, 0.5), expand = c(0, 0)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
dev.off()
jpeg("out.jpeg", width = 5, height = 2.5, units = 'in', res = 300)
corrplot(result_mat, method = "color", cl.lim = c(0, 1),
# col = rev(c(cm.colors(100), cm.colors(100))),
addgrid.col = "black",# addCoef.col = "black",
tl.col = "black", tl.srt = 90)
dev.off()
library(corrplot)
library(RColorBrewer)
jpeg("out.jpeg", width = 5, height = 2.5, units = 'in', res = 300)
corrplot(result_mat, method = "color", cl.lim = c(0, 1),
# col = rev(c(cm.colors(100), cm.colors(100))),
addgrid.col = "black",# addCoef.col = "black",
tl.col = "black", tl.srt = 90)
dev.off()
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Applicaton/StudyOne_JND/JND_results/")
file_names <- dir()[grep("csv", dir())]
lst <- lapply(file_names, function(x) read.table(x, header = FALSE, sep = ','))
#lst[[1]]
library(data.table)
# do.call("rbind", lst)
dta <- rbindlist(lst)
names(dta) <- c("TrialNo", "Base", "Offset", "Response", "RT")
dta$Subject <- rep(paste0("U", 1:9), each = 32)
library(dplyr)
result <- dta %>% group_by(Base, Offset) %>%
summarise(Counts = sum(Response))
result <- as.data.frame(result)
result_mat <- round(matrix(result$Counts, c(4, 4), byrow = FALSE) / 18, 2)
dimnames(result_mat) <- list(c(0, 0.125, 0.25, 0.5), c(2.575, 2.7, 2.95, 3.45))
result_mat <- abs(result_mat - 1)
jpeg("out.jpeg", width = 5, height = 2.5, units = 'in', res = 300)
corrplot(result_mat, method = "color", cl.lim = c(0, 1),
# col = rev(c(cm.colors(100), cm.colors(100))),
addgrid.col = "black",# addCoef.col = "black",
tl.col = "black", tl.srt = 90)
dev.off()
corrplot(result_mat, method = "color", cl.lim = c(0, 1),
# col = rev(c(cm.colors(100), cm.colors(100))),
addgrid.col = "black",# addCoef.col = "black",
tl.col = "black", tl.srt = 90)
jpeg("out.jpeg", width = 5, height = 2.5, units = 'in', res = 300)
corrplot(result_mat, method = "color", cl.lim = c(0, 1),
# col = rev(c(cm.colors(100), cm.colors(100))),
addgrid.col = "black",# addCoef.col = "black",
tl.col = "black", tl.srt = 90)
dev.off()
jpeg("out.jpeg", width = 5, height = 2.5, units = 'in', res = 300)
corrplot(result_mat, method = "color", cl.lim = c(0, 1),
# col = rev(c(cm.colors(100), cm.colors(100))),
addgrid.col = "black",# addCoef.col = "black",
tl.col = "black", tl.srt = 90)
dev.off()
jpeg("out.jpeg", width = 5, height = 5, units = 'in', res = 300)
corrplot(result_mat, method = "color", cl.lim = c(0, 1),
# col = rev(c(cm.colors(100), cm.colors(100))),
addgrid.col = "black",# addCoef.col = "black",
tl.col = "black", tl.srt = 90)
dev.off()
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Applicaton/StudyOne_JND/JND_results/")
file_names <- dir()[grep("csv", dir())]
lst <- lapply(file_names, function(x) read.table(x, header = FALSE, sep = ','))
#lst[[1]]
library(data.table)
# do.call("rbind", lst)
dta <- rbindlist(lst)
names(dta) <- c("TrialNo", "Base", "Offset", "Response", "RT")
dta$Subject <- rep(paste0("U", 1:9), each = 32)
library(dplyr)
result <- dta %>% group_by(Base, Offset) %>%
summarise(Counts = sum(Response))
result <- as.data.frame(result)
result_mat <- round(matrix(result$Counts, c(4, 4), byrow = FALSE) / 18, 2)
dimnames(result_mat) <- list(c(0, 0.125, 0.25, 0.5), c(2.575, 2.7, 2.95, 3.45))
result_mat <- abs(result_mat - 1)
library(corrplot)
library(RColorBrewer)
result_mat
off <- c(0, 0.125, 0.25, 0.5)
base <- c(2.575, 2.7, 2.95, 3.45)
all_off <- outer(off, base, FUN = "+")
# ob_b: offset + base load / base load
ob_b <- sweep(all_off, 2, base, FUN = "/")
out <- data.frame(rate_diff = as.vector(result_mat),
delta_load_base = as.vector(ob_b))
# remove 3.45 column for our system limitation
out <- out[1:12, ]
m0 <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m0)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.5, by = 0.001)
pred_percent0 <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.25
x[which(pred_percent == 0.95)]
pred_percent0
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
pred_percent
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.01)
pred_percent
out
summary(m0)
pred_percent <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.25
x[which(pred_percent == 0.95)]
x[which(pred_percent == 0.75)]
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.005)
pred_percent <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.25
x[which(pred_percent == 0.95)]
x[which(pred_percent == 0.75)]
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.25
x[which(pred_percent == 0.95)]
x[which(pred_percent == 0.75)]
# remove 3.45 column for our system limitation
out <- out[1:12, ]
m0 <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m0)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.25
x[which(pred_percent == 0.95)]
x[which(pred_percent == 0.75)]
94 * 1.21
94 * 1.25
c(113, 117) * 0.017 + 1.108
out <- data.frame(rate_diff = as.vector(result_mat),
delta_load_base = as.vector(ob_b))
m0 <- lm(rate_diff ~ log(delta_load_base), data = out)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
summary(m0)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.25
x[which(pred_percent == 0.95)]
x[which(pred_percent == 0.75)]
# remove 3.45 column for our system limitation
out_remove <- out[1:12, ]
m0_remove <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m0_remove)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent_remove <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.25
x[which(pred_percent_remove == 0.95)]
x[which(pred_percent_remove == 0.75)]
# remove 3.45 column for our system limitation
out_remove <- out[1:12, ]
m0_remove <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m0_remove)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent_remove <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.21
x[which(pred_percent_remove == 0.95)]
x[which(pred_percent_remove == 0.75)]
out <- data.frame(rate_diff = as.vector(result_mat),
delta_load_base = as.vector(ob_b))
# remove 3.45 column for our system limitation
out_remove <- out[1:12, ]
m0_remove <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m0_remove)
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent_remove <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.21
x[which(pred_percent_remove == 0.95)]
x[which(pred_percent_remove == 0.75)]
out <- data.frame(rate_diff = as.vector(result_mat),
delta_load_base = as.vector(ob_b))
# remove 3.45 column for our system limitation
out_remove <- out[1:12, ]
m0_remove <- lm(rate_diff ~ log(delta_load_base), data = out_remove)
summary(m0_remove)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent_remove <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.21
x[which(pred_percent_remove == 0.95)]
x[which(pred_percent_remove == 0.75)]
out <- data.frame(rate_diff = as.vector(result_mat),
delta_load_base = as.vector(ob_b))
out_remove <- out[1:12, ]
m0_remove <- lm(rate_diff ~ log(delta_load_base), data = out_remove)
summary(m0_remove)
# after fitting the curve, let's try to find 75% and 95% of JND
x <- seq(from = 1, to = 1.3, by = 0.001)
pred_percent_remove <- round(coef(m0)[1] + coef(m0)[2] * log(x), 2)
# delat L/ L = 1.21
x[which(pred_percent_remove == 0.95)]
x[which(pred_percent_remove == 0.75)]
# without remove
m1 <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m1)
# after fitting the curve, let's try to find 75% and 95% of JND
pred_percent <- round(coef(m1)[1] + coef(m1)[2] * log(x), 2)
# delat L/ L = 1.21
x[which(pred_percent == 0.95)]
x[which(pred_percent == 0.75)]
out <- data.frame(rate_diff = as.vector(result_mat),
delta_load_base = as.vector(ob_b))
# remove 3.45 column for our system limitation
out_remove <- out[1:12, ]
m0_remove <- lm(rate_diff ~ log(delta_load_base), data = out_remove)
summary(m0_remove)
pred_percent_remove <- round(coef(m0_remove)[1] + coef(m0_remove)[2] * log(x), 2)
# delat L/ L = 1.21
x[which(pred_percent_remove == 0.95)]
x[which(pred_percent_remove == 0.75)]
# without remove
m1 <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m1)
# after fitting the curve, let's try to find 75% and 95% of JND
pred_percent <- round(coef(m1)[1] + coef(m1)[2] * log(x), 2)
# delat L/ L = 1.21
x[which(pred_percent == 0.95)]
x[which(pred_percent == 0.75)]
2.7 * 1.25
2.7 * 1.21
94 * 1.21
94 * 1.25
m1 <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m1)
# after fitting the curve, let's try to find 75% and 95% of JND
pred_percent <- round(coef(m1)[1] + coef(m1)[2] * log(x), 2)
# delta L / L = 1.25
x[which(pred_percent == 0.95)]
#delta L / L = 1.167
x[which(pred_percent == 0.75)]
# without remove
m1 <- lm(rate_diff ~ log(delta_load_base), data = out)
summary(m1)
# after fitting the curve, let's try to find 75% and 95% of JND
pred_percent <- round(coef(m1)[1] + coef(m1)[2] * log(x), 2)
# delta L / L = 1.25
x[which(pred_percent == 0.95)]
#delta L / L = 1.167
x[which(pred_percent == 0.75)]
setwd("~/Documents/_NILab_CrazyMotor/FacePush/DC MOTOR/Document/Other/")
dir()
dta <- read.table("./comfortness-pilot.csv", sep = ',', header = TRUE)
dta <- read.table("./comfortness-pilot.csv", sep = ',', header = TRUE)
str(dta)
head(dta)
library(dplyr)
dta$pressure <- as.factor(dta$pressure)
table(dta$pressure)
dta %>% group_by(pressure) %>%
summarise(m_comfort = mean(comfortness),
std_comfort = sd(comfortness),
m_face = mean(from_face),
std_face = sd(from_face))
library(ggplot2)
head(dta)
ggplot(dta, aes(x = pressure, y = comfortness)) +
geom_bar()
dta_barplot <- dta %>% group_by(pressure) %>%
summarise(m_comfort = mean(comfortness),
std_comfort = sd(comfortness),
m_face = mean(from_face),
std_face = sd(from_face))
dta_barplot
ggplot(data = m0, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw()
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw()
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7")
dta_barplot
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), expand = c(0, 0))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(1, 7), breaks = seq(1, 7, 1))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1))
ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Ratio of the force was came from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25))
geom_bar(stat = "identity")
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
theme(axis.text=element_text(size=12))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
theme(axis.text=element_text(size=16))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
theme(axis.text=element_text(size=12))
ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Ratio of the force was came from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25))
ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Ratio of the force was came from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25))
geom_bar(stat = "identity") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Ratio of the force was came from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25))
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Ratio of the force was came from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
comfort <- ggplot(dta_barplot, aes(x = pressure, y = m_comfort)) +
geom_bar(stat = "identity", fill = "gray80") +
geom_errorbar(aes(ymin = m_comfort - std_comfort,
ymax = m_comfort + std_comfort),
width = .2, color = "gray20") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Comfortness 1 - 7") +
scale_y_continuous(limits = c(0, 7), breaks = seq(1, 7, 1)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
face <- ggplot(dta_barplot, aes(x = pressure, y = m_face)) +
geom_bar(stat = "identity", fill = "gray80") +
theme_bw() +
labs(x = "Pressure in kPa", y = "Ratio of the force was came from face") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
library(gridExtra)
grid.arrange(comfort, face)
grid.arrange(comfort, face, nrow = 1)
